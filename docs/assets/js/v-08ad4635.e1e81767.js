(self.webpackChunkblog_vuepress=self.webpackChunkblog_vuepress||[]).push([[82],{7399:(e,r,a)=>{"use strict";a.r(r),a.d(r,{data:()=>t});const t={key:"v-08ad4635",path:"/guide/pattern.html",title:"About Software Design @@",lang:"zh-tw",frontmatter:{},excerpt:"",headers:[{level:2,title:"如何製作軟的產品 ?",slug:"如何製作軟的產品",children:[{level:3,title:"程式碼",slug:"程式碼",children:[]},{level:3,title:"軟體設計 : 架構",slug:"軟體設計-架構",children:[]},{level:3,title:"DDD大王",slug:"ddd大王",children:[]}]}],filePathRelative:"guide/pattern.md",git:{updatedTime:1658840585e3,contributors:[{name:"Richard Lin",email:"33016870+dpes8693@users.noreply.github.com",commits:3}]}}},6899:(e,r,a)=>{"use strict";a.r(r),a.d(r,{default:()=>o});var t=a(6252);const n=(0,t.Wm)("h1",{id:"about-software-design"},[(0,t.Wm)("a",{class:"header-anchor",href:"#about-software-design"},"#"),(0,t.Uk)(" About Software Design @@")],-1),p=(0,t.Wm)("p",null,"推薦影片:",-1),i=(0,t.Wm)("iframe",{width:"560",height:"315",src:"https://www.youtube.com/embed/e0UOuQ_lCUY?start=141",title:"YouTube video player",frameborder:"0",allow:"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture",allowfullscreen:""},null,-1),h=(0,t.Wm)("p",null,"以下筆記參考來源:",-1),s={href:"https://youtu.be/dGbzlsBuw9M",target:"_blank",rel:"noopener noreferrer"},l=(0,t.Uk)("https://youtu.be/dGbzlsBuw9M"),d=(0,t.uE)('<h2 id="如何製作軟的產品"><a class="header-anchor" href="#如何製作軟的產品">#</a> 如何製作軟的產品 ?</h2><p>大方向來說兩點 1.程式碼本身 2.軟體設計的架構</p><h3 id="程式碼"><a class="header-anchor" href="#程式碼">#</a> 程式碼</h3><p>軟體工程師，可以很容易做出能動的程式，但不容易做出 :</p><p>-容易閱讀的程式 -容易維護的程式 -容易擴充的程式</p><h4 id="修正方案-一系列讓程式碼有序的動作"><a class="header-anchor" href="#修正方案-一系列讓程式碼有序的動作">#</a> 修正方案 : 一系列讓程式碼有序的動作</h4><p>撰寫開發文件 Markdown 是個好選擇</p><p>規範代碼風格 以團隊為主，只要程式碼不要看起來像是一群意見不合的人協作，統一即可</p><p>使用單元測試 測試驅動開發: 開發時，先寫測試程式 在寫產品程式</p><h3 id="軟體設計-架構"><a class="header-anchor" href="#軟體設計-架構">#</a> 軟體設計 : 架構</h3><p>參考前人的設計經驗</p><h4 id="物件導向設計-solid"><a class="header-anchor" href="#物件導向設計-solid">#</a> 物件導向設計 SOLID</h4><p>SRP : 單一職責原則 OCP : 開放 - 封閉原則 LSP : 里氏替換原則 ISP : 介面隔離原則 DIP : 依賴反向原則</p><h4 id="元件內聚性原則"><a class="header-anchor" href="#元件內聚性原則">#</a> 元件內聚性原則</h4><p>REP : 再使用性 - 發佈等價原則 CCP : 共同封閉原則 CRP : 共同重複使用原則</p><h4 id="元件耦合性原則"><a class="header-anchor" href="#元件耦合性原則">#</a> 元件耦合性原則</h4><p>ADP : 無循環依賴原則 SDP : 穩定依賴原則 SAP : 穩定抽象原則</p><h4 id="領域驅動設計-domain-driven-design"><a class="header-anchor" href="#領域驅動設計-domain-driven-design">#</a> 領域驅動設計 - Domain-Driven Design</h4><p>使用者介面層 應用層 領域層 基礎設施層</p><h4 id="設計模式-desgin-pattern"><a class="header-anchor" href="#設計模式-desgin-pattern">#</a> 設計模式 - Desgin Pattern</h4><p>Factory Pattern Abstract Factory Pattern Singleton Pattern Builder Pattern Prototype Pattern Adapter Pattern Bridge Pattern Filter Pattern More ...</p><h4 id="架構目標"><a class="header-anchor" href="#架構目標">#</a> 架構目標</h4><p>高內聚，低耦合</p><hr><p>遵循上述的原則，保持軟體具有一定程度的彈性</p><h3 id="ddd大王"><a class="header-anchor" href="#ddd大王">#</a> DDD大王</h3><p>四個開發模式意思:</p><p>TDD：測試驅動開發（Test-Driven Development）</p><p>BDD：行為驅動開發（Behavior Driven Development）</p><p>ATDD：驗收測試驅動開發（Acceptance Test Driven Development）</p><p>DDD：領域驅動開發（Domain Drive Design）</p><p>1、TDD：測試驅動開發（Test-Driven Development）</p><p>測試驅動開發是敏捷開發中的一項核心實踐和技術，也是一種設計方法論，TDD首先考慮使用需求（物件、功能、過程、介面等）</p><p>主要是編寫測試用例框架對功能的過程和介面進行設計，而測試框架可以持續進行驗證。大行其道的一些模式對TDD的支援都非常不錯，比如MVC和MVP等</p><p>2、BDD：行為驅動開發（Behavior Driven Development）</p><p>也就是行為驅動開發。這裡的B並非指的是Business，實際上BDD可以看作是對TDD的一種補充，讓開發、測試、BA以及客戶都能在這個基礎上達成一致，JBehave之類的BDD框架</p><p>3、ATDD：驗收測試驅動開發（Acceptance Test Driven Development）</p><p>通過單元測試用例來驅動功能程式碼的實現，團隊需要定義出期望的質量標準和驗收細則，以明確而且達成共識的驗收測試計劃（包含一系列測試場景）來驅動開發人員的TDD實踐和測試人員的測試指令碼開發。面向開發人員，強調如何實現系統以及如何檢驗</p><p>4、DDD：領域驅動開發（Domain Drive Design）</p><p>DDD指的是Domain Drive Design，也就是領域驅動開發,DDD實際上也是建立在這個基礎之上，因為它關注的是Service層的設計，著重於業務的實現,將分析和設計結合起來，不再使他們處於分裂的狀態，這對於我們正確完整的實現客戶的需求，以及建立一個具有業務伸縮性的模型</p>',40),o={render:function(e,r){const a=(0,t.up)("OutboundLink");return(0,t.wg)(),(0,t.j4)(t.HY,null,[n,p,i,h,(0,t.Wm)("p",null,[(0,t.Wm)("a",s,[l,(0,t.Wm)(a)])]),d],64)}}}}]);